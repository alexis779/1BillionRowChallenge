plugins {
	id 'java'
	id 'org.graalvm.buildtools.native' version '0.9.23'
	id 'me.champeau.jmh' version '0.7.1'
}

dependencies {
	implementation('com.fasterxml.jackson.core:jackson-databind:2.15.2')
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')
}

repositories {
    mavenCentral()
}

task createMeasurements(type: JavaExec) {
	classpath sourceSets.main.runtimeClasspath
	mainClass.set(findProperty("createMeasurements.class"))
	args(
		findProperty("createMeasurements.inputFile"),
		findProperty("createMeasurements.count"),
		findProperty("createMeasurements.outputFile"))
}

task calculateAverage(type: JavaExec) {
	classpath sourceSets.main.runtimeClasspath
	mainClass.set(findProperty("calculateAverage.class"))

	def asyncProfilerPath = findProperty("asyncProfiler.path")
	def asyncProfilerAgent = "-agentpath:${asyncProfilerPath}=start,event=cpu,file=flamegraph.html"
	jvmArgs(asyncProfilerAgent)

	args(findProperty("createMeasurements.outputFile"))
	standardOutput = new FileOutputStream(findProperty("calculateAverage.outputFile"))
	errorOutput = new FileOutputStream(findProperty("calculateAverage.errorFile"))
	doNotTrackState("app should always run")
}

task validateStatistics(type: JavaExec) {
	classpath sourceSets.main.runtimeClasspath
	mainClass.set(findProperty("validateStatistics.class"))
	args(findProperty("validateStatistics.expectedOutputFile"), findProperty("calculateAverage.outputFile"))
}

graalvmNative {
	binaries {
		main {
			mainClass.set(findProperty("calculateAverage.class"))
			runtimeArgs(findProperty("createMeasurements.outputFile"))
		}
	}
}

test {
	useJUnitPlatform()
}

jmh {
	includes = [ 'ComparativeBenchmark' ]
}
